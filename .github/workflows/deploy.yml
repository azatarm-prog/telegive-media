name: Deploy Media Management Service

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check . || echo "Code formatting issues found - run 'black .' to fix"
    
    - name: Validate requirements
      run: python scripts/validate_requirements.py
    
    - name: Run pre-deployment validation
      run: |
        chmod +x scripts/pre-deploy-validate.sh
        ./scripts/pre-deploy-validate.sh
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short --cov=. --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Test health endpoints
      run: |
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'sqlite:///:memory:'
        from app import create_app
        app = create_app('testing')
        client = app.test_client()
        
        # Test health endpoints
        endpoints = ['/health', '/health/detailed']
        for endpoint in endpoints:
            response = client.get(endpoint)
            print(f'{endpoint}: {response.status_code}')
            assert response.status_code in [200, 503], f'Unexpected status for {endpoint}'
        
        print('‚úÖ All health endpoints working')
        "
    
    - name: Test API endpoints
      run: |
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'sqlite:///:memory:'
        from app import create_app
        app = create_app('testing')
        client = app.test_client()
        
        # Test API endpoints
        endpoints = ['/api/media/', '/api/media/upload/status']
        for endpoint in endpoints:
            response = client.get(endpoint)
            print(f'{endpoint}: {response.status_code}')
            assert response.status_code == 200, f'API endpoint {endpoint} failed'
        
        print('‚úÖ All API endpoints working')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || echo "Security issues found - review bandit-report.json"
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  deploy:
    needs: [validate, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway
      uses: railwayapp/railway-deploy@v1
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_NAME }}
    
    - name: Wait for deployment
      run: sleep 90
    
    - name: Set up Python for post-deployment verification
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install verification dependencies
      run: |
        pip install requests
    
    - name: Post-deployment verification
      run: |
        python scripts/post_deploy_verify.py ${{ secrets.RAILWAY_SERVICE_URL }}
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        echo "Service URL: ${{ secrets.RAILWAY_SERVICE_URL }}"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        exit 1

  notify:
    needs: [validate, security-scan, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Media Management Service deployed successfully"
        else
          echo "‚ùå Media Management Service deployment failed"
        fi

